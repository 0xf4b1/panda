# The current Travis default is a VM based 16.04 Xenial on GCE
dist: xenial
language: c
compiler:
  - gcc
cache:
  # There is one cache per branch and compiler version.
  timeout: 1200
  ccache: true
  pip: true
  directories:
  - $HOME/avocado/data/cache


addons:
  apt:
    sources:
      # up to ubuntu xenial, we can use the ppa name
      - sourceline: 'ppa:phulin/panda'
      # the ppa doesn't support later ubuntu releases -- specify url instead
      #- sourceline: 'deb http://ppa.launchpad.net/phulin/panda/ubuntu xenial main'
    packages:
      # Build dependencies
      - chrpath
      - libaio-dev
      - libattr1-dev
      - libbrlapi-dev
      - libcap-dev
      - libcap-ng-dev
      - libgcc-4.8-dev
      - libgnutls-dev
      - libgtk-3-dev
      - libiscsi-dev
      - liblttng-ust-dev
      - libncurses5-dev
      - libnfs-dev
      - libnss3-dev
      - libpixman-1-dev
      - libpng12-dev
      - librados-dev
      - libsdl1.2-dev
      - libseccomp-dev
      - libspice-protocol-dev
      - libspice-server-dev
      - libssh-dev
      - liburcu-dev
      - libusb-1.0-0-dev
      - sparse
      - uuid-dev
      # PANDA stuff
      - bison
      - flex
      - linux-libc-dev
      - libcapstone-dev
      - libdwarf-dev
      - libelf-dev
      - libprotobuf-c0-dev
      - libprotoc-dev
      - libwireshark-dev
      - libwiretap-dev
      - llvm-3.3-dev
      - clang-3.3
      - protobuf-c-compiler
      - protobuf-compiler
      - python-pip
      - python-protobuf
      - python-pycparser
      # PYPANDA stuff
      - python3
      - python3-pip
      - python3-venv
      - python3-setuptools
      - genisoimage # To make isos for run_guest
      - wget
      # To build 32-bit targets for testing
      - libc6-dev-i386
      - gcc-multilib
      - nasm

# PANDA
sudo: required
dist: xenial
env:
  global:
    - PANDA_TEST="no" # These tests aren't too useful and timeout travis. They passed locally as of 2ce657c
    - TEST_CMD="make check"
    - MAKEFLAGS="-j3"
  matrix:
    - CONFIG=""
    - CONFIG="--enable-debug --enable-debug-tcg --enable-trace-backends=log"
    - CONFIG="--disable-linux-aio --disable-cap-ng --disable-attr --disable-brlapi --disable-uuid --disable-libusb"
    - CONFIG="--enable-modules"
    - CONFIG="--with-coroutine=ucontext"
    - CONFIG="--with-coroutine=sigaltstack"
git:
  # we want to do this ourselves for some reason
  submodules: false

before_install:
  - sudo pip install pycparser cffi colorama protobuf # pycparser is a core dependency, rest are for pypanda
  - git submodule update --init dtc
  - cd $(pyenv root) && git checkout master && git pull; cd - # Update pyenv
  - echo 'core_%e.%p' | sudo tee /proc/sys/kernel/core_pattern # Store coredumps locally
before_script:
  - ulimit -c unlimited -S       # enable core dumps
  # Setup python environment with pyenv (python2 and python3)
  - pyenv install 2.7.9 || travis_terminate 1; # For core qemu
  - pyenv install 3.6.6 || travis_terminate 1; # For pypanda
  - pyenv shell 2.7.9 3.6.6 || travis_terminate 1; # Create a shell with both python2 and python3
  - pip3 install cffi colorama protobuf # PYPANDA dependencies - not auto installed by setup because we don't use pip to install pypanda

script:
  # Run install script
  - sudo panda/scripts/install_ubuntu.sh || travis_terminate 1; # Build panda
    #- make ${MAKEFLAGS} && ${TEST_CMD}
  # Install pypanda
  - cd panda/python/core
  - python3 setup.py install || travis_terminate 1
  # Run pypanda tests
    # - cd ../tests
    #- make || travis_terminate 1
    #- pip3 install -r requirements.txt || travis_terminate 1 # Install test python dependencies (capstone, pyelftools)
    #  - python3 multi_proc_cbs.py
    #  - python3 taint_reg.py
    #  - python3 taint_ram.py
    #  # Run record_then_replay on multiple architectures
    #  - python3 record_then_replay.py i386
    #  - python3 record_then_replay.py x86_64
    #  - python3 record_then_replay.py arm
    #  - python3 record_then_replay.py ppc
    #  # Test hooking framework
    #  - python3 hooking.py
    #  # Regression tests
    #  - python3 sleep_in_cb.py
matrix:
  include:
    # Test with CLang for compile portability
    - env: CONFIG=""
      compiler: clang
    # gprof/gcov are GCC features
    - env: CONFIG="--enable-gprof --enable-gcov --disable-pie"
      compiler: gcc
    # We manually include builds which we disable "make check" for
    - env: CONFIG="--enable-debug --enable-tcg-interpreter"
           TEST_CMD=""
      compiler: gcc
    - env: CONFIG="--enable-trace-backends=simple"
           TEST_CMD=""
      compiler: gcc
    - env: CONFIG="--enable-trace-backends=ftrace"
           TEST_CMD=""
      compiler: gcc
    - env: CONFIG="--enable-trace-backends=ust"
           TEST_CMD=""
      compiler: gcc
    - env: CONFIG="--disable-tcg"
           TEST_CMD=""
      compiler: gcc
    - env: CONFIG=""
      os: osx
      compiler: clang
    # Plain Trusty System Build
    - env: CONFIG="--disable-linux-user"
      sudo: required
      addons:
      dist: trusty
      compiler: gcc
      before_install:
        - sudo apt-get update -qq
        - sudo apt-get build-dep -qq qemu
        - wget -O - http://people.linaro.org/~alex.bennee/qemu-submodule-git-seed.tar.xz | tar -xvJ
        - git submodule update --init --recursive
    # Plain Trusty Linux User Build
    - env: CONFIG="--disable-system"
      sudo: required
      addons:
      dist: trusty
      compiler: gcc
      before_install:
        - sudo apt-get update -qq
        - sudo apt-get build-dep -qq qemu
        - wget -O - http://people.linaro.org/~alex.bennee/qemu-submodule-git-seed.tar.xz | tar -xvJ
        - git submodule update --init --recursive
    # Trusty System build with latest stable clang
    - sudo: required
      addons:
      dist: trusty
      language: generic
      compiler: none
      env:
        - COMPILER_NAME=clang CXX=clang++-3.9 CC=clang-3.9
        - CONFIG="--disable-linux-user --cc=clang-3.9 --cxx=clang++-3.9"
      before_install:
        - wget -nv -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -
        - sudo apt-add-repository -y 'deb http://llvm.org/apt/trusty llvm-toolchain-trusty-3.9 main'
        - sudo apt-get update -qq
        - sudo apt-get install -qq -y clang-3.9
        - sudo apt-get build-dep -qq qemu
        - wget -O - http://people.linaro.org/~alex.bennee/qemu-submodule-git-seed.tar.xz | tar -xvJ
        - git submodule update --init --recursive
      before_script:
        - ./configure ${CONFIG} || cat config.log
    # Trusty Linux User build with latest stable clang
    - sudo: required
      addons:
      dist: trusty
      language: generic
      compiler: none
      env:
        - COMPILER_NAME=clang CXX=clang++-3.9 CC=clang-3.9
        - CONFIG="--disable-system --cc=clang-3.9 --cxx=clang++-3.9"
      before_install:
        - wget -nv -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -
        - sudo apt-add-repository -y 'deb http://llvm.org/apt/trusty llvm-toolchain-trusty-3.9 main'
        - sudo apt-get update -qq
        - sudo apt-get install -qq -y clang-3.9
        - sudo apt-get build-dep -qq qemu
        - wget -O - http://people.linaro.org/~alex.bennee/qemu-submodule-git-seed.tar.xz | tar -xvJ
        - git submodule update --init --recursive
      before_script:
        - ./configure ${CONFIG} || cat config.log
    # Using newer GCC with sanitizers
    - addons:
        apt:
          sources:
            # PPAs for newer toolchains
            - ubuntu-toolchain-r-test
          packages:
            # Extra toolchains
            - gcc-5
            - g++-5
            # Build dependencies
            - libaio-dev
            - libattr1-dev
            - libbrlapi-dev
            - libcap-ng-dev
            - libgnutls-dev
            - libgtk-3-dev
            - libiscsi-dev
            - liblttng-ust-dev
            - libnfs-dev
            - libncurses5-dev
            - libnss3-dev
            - libpixman-1-dev
            - libpng12-dev
            - librados-dev
            - libsdl1.2-dev
            - libseccomp-dev
            - libspice-protocol-dev
            - libspice-server-dev
            - libssh2-1-dev
            - liburcu-dev
            - libusb-1.0-0-dev
            - libvte-2.90-dev
            - sparse
            - uuid-dev
      language: generic
      compiler: none
      env:
        - COMPILER_NAME=gcc CXX=g++-5 CC=gcc-5
        - CONFIG="--cc=gcc-5 --cxx=g++-5 --disable-pie --disable-linux-user"
        - TEST_CMD=""
      before_script:
        - ./configure ${CONFIG} --extra-cflags="-g3 -O0 -fsanitize=thread -fuse-ld=gold" || cat config.log
